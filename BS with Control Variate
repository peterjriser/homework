import numpy as np
import time
from scipy.stats import norm


S = 41
K = 40
r = 0.08
sig = 0.3
div = 0
T= 1
N = 52
M = 1000


def VanillaCallPayoff(S, K):
  return np.maximum(S - K, 0.0)
  
def BSdelta(St,tau,K,sig, r, div):
  d1 = (np.log((St/K))+(r - div + (sig*sig*0.5)*(tau))) / (sig * np.sqrt(tau))
  delta = np.exp(-div*tau) * norm.cdf(d1)
  return delta

def BSwithDelta(K,T,S, sig,r,div,N, M):
  beta1 = -1
  dt = T/N
  nudt = (r - div - 0.5 *sig*sig) *dt
  sigsdt = sig*np.sqrt(dt)
  erddt = np.exp((r-div)*dt)
  St = np.zeros(N)
  cv = np.zeros(N)
  maxes = np.zeros(M)
  
  for j in range(M):
    z = np.random.normal(size=(int(N/2)))
    z = np.concatenate((z,-z))
    St[0] = S
    cv[0] = 0
    
    
    for i in range(1, N):
      tau = (i-1)*dt
      delta = BSdelta(St[0],tau,K, sig, r, div)
      Stn = St[i-1]*np.exp(nudt + sigsdt * z[i])
      cv[i] = cv[i-1] + delta*(Stn - St[i-1]* erddt)
      St[i] = Stn
    x = cv.mean()
    maxes[j] = VanillaCallPayoff(np.max(St), K) + beta1*x
    
  callprc = maxes.mean()*np.exp(-r * T) 
  sterr = maxes.std()/np.sqrt(len(maxes))
  print("The Black Scholes Price of this option:", callprc)
  print("The Standard Error of this simulation is:", sterr)
start = time.time()
BSwithDelta(K,T,S,sig,r,div,N,M)
end = time.time()
print("It took", (end -start), "seconds to run")
